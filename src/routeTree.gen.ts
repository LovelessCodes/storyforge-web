/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MapRouteImport } from './routes/map'
import { Route as FaqRouteImport } from './routes/faq'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GuideIndexRouteImport } from './routes/guide/index'
import { Route as GuideMigrateRouteImport } from './routes/guide/migrate'

const MapRoute = MapRouteImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRouteImport,
} as any)
const FaqRoute = FaqRouteImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GuideIndexRoute = GuideIndexRouteImport.update({
  id: '/guide/',
  path: '/guide/',
  getParentRoute: () => rootRouteImport,
} as any)
const GuideMigrateRoute = GuideMigrateRouteImport.update({
  id: '/guide/migrate',
  path: '/guide/migrate',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/faq': typeof FaqRoute
  '/map': typeof MapRoute
  '/guide/migrate': typeof GuideMigrateRoute
  '/guide': typeof GuideIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/faq': typeof FaqRoute
  '/map': typeof MapRoute
  '/guide/migrate': typeof GuideMigrateRoute
  '/guide': typeof GuideIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/faq': typeof FaqRoute
  '/map': typeof MapRoute
  '/guide/migrate': typeof GuideMigrateRoute
  '/guide/': typeof GuideIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/faq' | '/map' | '/guide/migrate' | '/guide'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/faq' | '/map' | '/guide/migrate' | '/guide'
  id: '__root__' | '/' | '/faq' | '/map' | '/guide/migrate' | '/guide/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FaqRoute: typeof FaqRoute
  MapRoute: typeof MapRoute
  GuideMigrateRoute: typeof GuideMigrateRoute
  GuideIndexRoute: typeof GuideIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/guide/': {
      id: '/guide/'
      path: '/guide'
      fullPath: '/guide'
      preLoaderRoute: typeof GuideIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/guide/migrate': {
      id: '/guide/migrate'
      path: '/guide/migrate'
      fullPath: '/guide/migrate'
      preLoaderRoute: typeof GuideMigrateRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FaqRoute: FaqRoute,
  MapRoute: MapRoute,
  GuideMigrateRoute: GuideMigrateRoute,
  GuideIndexRoute: GuideIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
